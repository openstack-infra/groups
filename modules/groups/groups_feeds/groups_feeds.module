<?php
/**
 * @file
 * Adds a Markdown feed processor to the Feeds module.
 */

/**
 * Implements hook_feeds_plugins().
 */
function groups_feeds_feeds_plugins() {
  $info = array();
  $info['MarkdownParser'] = array(
    'name' => 'Markdown parser',
    'description' => 'Parses markdowns with jekyll like yaml header.',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'FeedsMarkdownParser',
      'file' => 'FeedsMarkdownParser.inc',
      'path' => drupal_get_path('module', 'groups_feeds'),
    ),
  );
  return $info;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function groups_feeds_ctools_plugin_api($owner, $api) {
  if ($owner == 'feeds' && $api == 'plugins') {
    return array('version' => 1);
  }
  if ($owner == 'feeds' && $api == 'feeds_importer_default') {
    return array('version' => 1);
  }
}

/**
 * Rebuild scheduled jobs.
 *
 * Defined variables:
 * - 'static_pages_import_period': the frequency of static
 *   pages import, defaults to 5m
 * - 'meetup_events_import_period': the frequency of meetup
 *   event import, defaults to 1h
 *
 * A job is disabled when the update frequency variable
 * is set to 0.
 *
 */
function groups_feeds_rebuild_jobs() {
  // setup static pages import
  $job = array(
    'type' => 'page-import',
    'id' => 1,
    'period' => 300, // defaults to 5m
    'periodic' => TRUE
  );
  if ((int)variable_get('static_pages_import_period', 300) == 0) {
    JobScheduler::get('static_pages_import')->remove($job);
  } else {
    JobScheduler::get('static_pages_import')->set($job);
  }
  // setup meetup events import
    $job = array(
    'type' => 'events-import',
    'id' => 1,
    'period' => 3600, // defaults to 1h
    'periodic' => TRUE
  );
  if ((int)variable_get('meetup_events_import_period', 3600) == 0) {
    JobScheduler::get('meetup_events_import')->remove($job);
  } else {
    JobScheduler::get('meetup_events_import')->set($job);
  }
}

/**
 * Implements hook_cron_job_scheduler_info()
 *
 * Define feed import scheduler items.
 *
 * @return array
 *   An associative array including the periodically
 *   scheduled feed imports.
 */
function groups_feeds_cron_job_scheduler_info() {
  $schedulers = array();
  $schedulers['static_pages_import'] = array(
    'queue name' => 'static_pages_import_queue',
  );
  $schedulers['meetup_events_import'] = array(
    'queue name' => 'meetup_events_import_queue',
  );
  return $schedulers;
}

/**
 * Implements hook_cron_queue_info()
 *
 * @return array
 *   An associative array that contains feed
 *   queues.
 */
function groups_feeds_cron_queue_info() {
  $queues = array();
  $queues['static_pages_import_queue'] = array(
    'worker callback' => 'groups_feeds_static_pages_import',
    'time' => 120,
  );
  $queues['meetup_events_import_queue'] = array(
    'worker callback' => 'groups_feeds_meetup_events_import',
    'time' => 120,
  );
  return $queues;
}

/**
 * Static pages import worker.
 *
 * @param  array $job Associative array of job parameters. When set to
 *   NULL, won't reschedule the job.
 */
function groups_feeds_static_pages_import($job) {
  watchdog('groups_feeds', 'start static page import', array(), WATCHDOG_INFO);
  $feedSource = feeds_source('static_page_import');
  $config = $feedSource->getConfig();
  $directory = variable_get('groups_feeds_markdown_directory', NULL);
  if (empty($directory)) {
    watchdog('Groups Feeds', 'Variable groups_feeds_markdown_directory missing.', array(), WATCHDOG_ERROR);
    return FALSE;
  }
  $config['feeds_fetcher_directory_fetcher']['source'] = $directory;
  $config['feeds_fetcher_directory_fetcher']['feed_files_fetched'] = array();
  $feedSource->setConfig($config);
  try {
    while (FEEDS_BATCH_COMPLETE != $feedSource->import());
    $feedSource->log('import', 'Import static page: !source', array('!directory' => $directory), WATCHDOG_INFO);
  } catch (Exception $e) {
    watchdog_exception('Groups Feeds', $e);
  }
  // reschedule, reset the reserved flag here
  if ($job != NULL) {
    JobScheduler::get('static_pages_import')->set($job);
  }
}

function groups_feeds_user_groups_import($job) {
  $url = 'https://raw.githubusercontent.com/openstack-infra/groups-static-pages/master/groups.json';
  watchdog('groups_feeds', 'start user groups import', array(), WATCHDOG_INFO);
  $feedSource = feeds_source('user_group_feed_importer');
  $config = $feedSource->getConfig();
  $config['FeedsHTTPFetcher']['source'] = $url;
  $feedSource->setConfig($config);
  try {
    while (FEEDS_BATCH_COMPLETE != $feedSource->import());
    $feedSource->log('import', 'Import user groups: !source', array('!source' => $url), WATCHDOG_INFO);
  } catch (Exception $e) {
    watchdog_exception('Groups Feeds', $e);
  }
  if ($job != NULL) {
    JobScheduler::get('user_groups_import')->set($job);
  }
}

/**
 * Meetup events import worker.
 *
 * @param  array $job Associative array of job parameters. When set to
 *   NULL, won't reschedule the job.
 */
function groups_feeds_meetup_events_import($job) {
  $meetup_links = groups_feeds_get_meetup_links();
  foreach ($meetup_links as $meetup_link) {
    $url = $meetup_link['url'].'/events/ical/';
    $feedSource = feeds_source('ical_feed_importer');
    $config = $feedSource->getConfig();
    $config['FeedsHTTPFetcher']['source'] = $url;
    $feedSource->setConfig($config);
    try {
      while (FEEDS_BATCH_COMPLETE != $feedSource->import());
      $feedSource->log('import', 'Import meetup event: !url', array('!url' => $url), WATCHDOG_INFO);
    } catch (Exception $e) {
      echo 'Failed to import feed: '.$url."\n";
    }
  }
  // reschedule, reset the reserved flag here
  if ($job != NULL) {
    JobScheduler::get('meetup_events_import')->set($job);
  }
}

/**
 * Construct static pages feed importer
 */
function groups_feeds_static_pages_importer() {
  $feeds_importer = new stdClass();
  $feeds_importer->disabled = FALSE; /* Edit this to true to make a default feeds_importer disabled initially */
  $feeds_importer->api_version = 1;
  $feeds_importer->id = 'static_page_import';
  $feeds_importer->config = array(
    'name' => 'Static page import',
    'description' => 'Import page nodes from markdown file.',
    'fetcher' => array(
      'plugin_key' => 'feeds_fetcher_directory_fetcher',
      'config' => array(
        'recursive' => 1,
        'directory' => 'public://feeds',
        'filemask' => '/\\.md$/',
        'updated_files' => 1,
      ),
    ),
    'parser' => array(
      'plugin_key' => 'MarkdownParser',
      'config' => array(),
    ),
    'processor' => array(
      'plugin_key' => 'FeedsNodeProcessor',
      'config' => array(
        'expire' => '-1',
        'author' => '1',
        'authorize' => 1,
        'mappings' => array(
          0 => array(
            'source' => 'guid',
            'target' => 'guid',
            'unique' => 1,
          ),
          1 => array(
            'source' => 'title',
            'target' => 'title_field',
            'unique' => FALSE,
          ),
          2 => array(
            'source' => 'body',
            'target' => 'body',
            'unique' => FALSE,
          ),
          3 => array(
            'source' => 'path',
            'target' => 'path_alias',
            'unique' => FALSE,
          ),
        ),
        'update_existing' => '2',
        'input_format' => 'markdown',
        'skip_hash_check' => 0,
        'bundle' => 'page',
      ),
    ),
    'content_type' => '',
    'update' => 0,
    'import_period' => '-1',
    'expire_period' => 3600,
    'import_on_create' => 1,
    'process_in_background' => 1,
  );
  return $feeds_importer;
}

/**
 * Construct meetup.com ical importer
 */
function groups_feeds_meetup_ical_importer() {
  $feeds_importer = new stdClass();
  $feeds_importer->disabled = FALSE; /* Edit this to true to make a default feeds_importer disabled initially */
  $feeds_importer->api_version = 1;
  $feeds_importer->id = 'ical_feed_importer';
  $feeds_importer->config = array(
    'name' => 'meetup.com events',
    'description' => 'meetup.com event feed importer',
    'fetcher' => array(
      'plugin_key' => 'FeedsHTTPFetcher',
      'config' => array(
        'auto_detect_feeds' => FALSE,
        'use_pubsubhubbub' => FALSE,
        'designated_hub' => '',
        'request_timeout' => NULL,
      ),
    ),
    'parser' => array(
      'plugin_key' => 'DateiCalFeedsParser',
      'config' => array(
        'indefinite_count' => '52',
        'until_not_utc' => FALSE,
        'skip_days' => NULL,
      ),
    ),
    'processor' => array(
      'plugin_key' => 'FeedsNodeProcessor',
      'config' => array(
        'expire' => '-1',
        'author' => '1',
        'authorize' => 1,
        'mappings' => array(
          0 => array(
            'source' => 'DTSTART',
            'target' => 'field_date:start',
            'unique' => FALSE,
          ),
          1 => array(
            'source' => 'DTEND',
            'target' => 'field_date:end',
            'unique' => FALSE,
          ),
          2 => array(
            'source' => 'SUMMARY',
            'target' => 'title_field',
            'unique' => FALSE,
          ),
          3 => array(
            'source' => 'DESCRIPTION',
            'target' => 'body',
            'unique' => FALSE,
          ),
          4 => array(
            'source' => 'UID',
            'target' => 'guid',
            'unique' => 1,
          ),
        ),
        'update_existing' => '1',
        'input_format' => 'plain_text',
        'skip_hash_check' => 0,
        'bundle' => 'event',
      ),
    ),
    'content_type' => '',
    'update' => 0,
    'import_period' => '-1',
    'expire_period' => 3600,
    'import_on_create' => 1,
    'process_in_background' => 0,
  );
  return $feeds_importer;
}

/**
 * Implement hook_feeds_importer_default()
 *
 * Add static page importer
 */

function groups_feeds_feeds_importer_default() {
  $export = array();
  $export['staticpages'] = groups_feeds_static_pages_importer();
  $export['ical_feed_importer'] = groups_feeds_meetup_ical_importer();
  $export['user_group_feed_importer'] = groups_feeds_groups_importer();
  return $export;
}

/**
 * List of meetup.com links registered for
 * user groups.
 */

function groups_feeds_get_meetup_links() {
  $result = db_select('node', 'n')
    ->fields('n')->condition('status', 1)
    ->condition('type', 'group', '=')
    ->execute();
  $meetup_links = array();
  foreach ($result as $record) {
    $node = node_load($record->nid);
    $resource_links = $node->field_resource_links['und'];
    if (isset($resource_links)) {
      foreach ($resource_links as $resource_link) {
        $value = $resource_link['value'];
        if ((strpos($value, 'http://www.meetup.com') === 0) ||
            (strpos($value, 'https://www.meetup.com') === 0)) {
          $meetup_links[] = array(
            'nid' => $record->nid,
            'url' => $value);
        }
      }
    }
  }
  return $meetup_links;
}

/**
 * Implements hook_node_presave().
 *
 * Fix $node->title assignment failure in case of
 * page content type, and assign title field's value
 * into $node->title attribute.
 *
 * @param  class $node  node prepared to save
 */
function groups_feeds_node_presave($node) {
  if ($node->type == 'page') {
    // set title attribute of node
    $node->title = $node->title_field['und'][0]['value'];
  }
}

/**
 * Implements hook_node_insert()
 *
 * Create a menu entry for page content type
 * based on path and node title.
 *
 * @param  class $node  inserted node object
 */
function groups_feeds_node_insert($node) {
  if ($node->type == 'page') {
    // assign node menu automatically from path
    $node->menu = array(
      'link_title' => $node->title,
      'description' => '',
      'menu_name' => 'main-menu',
      'plid' => 0,
      'enabled' => 1,
      'weight' => 20,
    );
  }
}

function groups_feeds_groups_importer() {
  $feeds_importer = new stdClass();
  $feeds_importer->disabled = FALSE; /* Edit this to true to make a default feeds_importer disabled initially */
  $feeds_importer->api_version = 1;
  $feeds_importer->id = 'user_group_feed_importer';
  $feeds_importer->config = array(
    'name' => 'User group feed importer',
    'description' => 'Import user group data from json',
    'fetcher' => array(
      'plugin_key' => 'FeedsHTTPFetcher',
      'config' => array(
        'auto_detect_feeds' => FALSE,
        'use_pubsubhubbub' => FALSE,
        'designated_hub' => '',
        'request_timeout' => NULL,
      ),
    ),
    'parser' => array(
      'plugin_key' => 'FeedsJSONPathParser',
      'config' => array(
        'context' => '$.groups.*',
        'sources' => array(
          'jsonpath_parser:3' => 'id',
          'jsonpath_parser:0' => 'title',
          'jsonpath_parser:1' => 'location',
          'jsonpath_parser:2' => 'attributes',
        ),
        'debug' => array(
          'options' => array(
            'context' => 0,
            'jsonpath_parser:3' => 0,
            'jsonpath_parser:0' => 0,
            'jsonpath_parser:1' => 0,
            'jsonpath_parser:2' => 0,
          ),
        ),
      ),
    ),
    'processor' => array(
      'plugin_key' => 'FeedsNodeProcessor',
      'config' => array(
        'expire' => '-1',
        'author' => '1',
        'authorize' => 1,
        'mappings' => array(
          0 => array(
            'source' => 'jsonpath_parser:3',
            'target' => 'guid',
            'unique' => 1,
          ),
          1 => array(
            'source' => 'jsonpath_parser:0',
            'target' => 'title',
            'unique' => FALSE,
          ),
          2 => array(
            'source' => 'jsonpath_parser:1',
            'target' => 'field_group_location',
            'unique' => FALSE,
          ),
          3 => array(
            'source' => 'jsonpath_parser:2',
            'target' => 'field_resource_links',
            'unique' => FALSE,
          ),
        ),
        'update_existing' => '0',
        'input_format' => 'plain_text',
        'skip_hash_check' => 0,
        'bundle' => 'group',
      ),
    ),
    'content_type' => '',
    'update' => 0,
    'import_period' => '-1',
    'expire_period' => 3600,
    'import_on_create' => 1,
    'process_in_background' => 0,
  );
  return $feeds_importer;
}

function groups_feeds_feeds_presave($source, $entity, $item) {
  static $list_lookup;
  if ($list_lookup == null) {
    $list_lookup = field_property_list_reverse_lookup();
  }
  if (($entity->feeds_item->entity_type == 'node') &&
    ($entity->feeds_item->id == 'user_group_feed_importer')) {
    $entity->field_group_location[LANGUAGE_NONE][0] = $item['jsonpath_parser:1'];
    $attributes = $item['jsonpath_parser:2'];
    if (isset($attributes)) {
      $attr = array();
      foreach ($attributes as $attribute) {
        $key = key($attribute);
        $value = $attribute[$key];
        if ($list_lookup[$key] != NULL) {
          $attr[] = array(
            'key' => $list_lookup[$key],
            'value' => $value
          );
        }
      }
      $entity->field_resource_links['und'] = $attr;
    }
  }
}

function groups_feeds_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
    $info = field_info_field($name);
    if (($info['field_name'] == 'field_group_location') || ($info['field_name'] == 'field_resource_links')) {
      $targets[$name] = array(
        'name' => check_plain($instance['label']),
        'callback'    => 'groups_feeds_set_target_entity_reference',
        'description' => t(''),
      );
    }
  }
}

function groups_feeds_set_target_entity_reference($source, $entity, $target, $value, $mapping) {
  // @todo: implement dummy callback
}