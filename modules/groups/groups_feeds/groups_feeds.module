<?php
/**
 * @file
 * Adds a Markdown feed processor to the Feeds module.
 */

/**
 * Implements hook_feeds_plugins().
 */
function groups_feeds_feeds_plugins() {
  $info = array();
  $info['MarkdownParser'] = array(
    'name' => 'Markdown parser',
    'description' => 'Parses markdowns with jekyll like yaml header.',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'FeedsMarkdownParser',
      'file' => 'FeedsMarkdownParser.inc',
      'path' => drupal_get_path('module', 'groups_feeds'),
    ),
  );
  return $info;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function groups_feeds_ctools_plugin_api($owner, $api) {
  if ($owner == 'feeds' && $api == 'plugins') {
    return array('version' => 1);
  }
  if ($owner == 'feeds' && $api == 'feeds_importer_default') {
    return array('version' => 1);
  }
}

/**
 * Construct static pages feed importer
 */
function groups_feeds_static_pages_importer() {
  $feeds_importer = new stdClass();
  $feeds_importer->disabled = FALSE; /* Edit this to true to make a default feeds_importer disabled initially */
  $feeds_importer->api_version = 1;
  $feeds_importer->id = 'static_page_import';
  $feeds_importer->config = array(
    'name' => 'Static page import',
    'description' => 'Import page nodes from markdown file.',
    'fetcher' => array(
      'plugin_key' => 'feeds_fetcher_directory_fetcher',
      'config' => array(
        'recursive' => 1,
        'directory' => 'public://feeds',
        'filemask' => '/\\.md$/',
        'updated_files' => 1,
      ),
    ),
    'parser' => array(
      'plugin_key' => 'MarkdownParser',
      'config' => array(),
    ),
    'processor' => array(
      'plugin_key' => 'FeedsNodeProcessor',
      'config' => array(
        'expire' => '-1',
        'author' => '1',
        'authorize' => 1,
        'mappings' => array(
          0 => array(
            'source' => 'guid',
            'target' => 'guid',
            'unique' => 1,
          ),
          1 => array(
            'source' => 'title',
            'target' => 'title_field',
            'unique' => FALSE,
          ),
          2 => array(
            'source' => 'body',
            'target' => 'body',
            'unique' => FALSE,
          ),
          3 => array(
            'source' => 'path',
            'target' => 'path_alias',
            'unique' => FALSE,
          ),
        ),
        'update_existing' => '2',
        'input_format' => 'plain_text',
        'skip_hash_check' => 0,
        'bundle' => 'page',
      ),
    ),
    'content_type' => '',
    'update' => 0,
    'import_period' => '-1',
    'expire_period' => 3600,
    'import_on_create' => 1,
    'process_in_background' => 1,
  );
  return $feeds_importer;
}

/**
 * Construct meetup.com ical importer
 */
function groups_feeds_meetup_ical_importer() {
  $feeds_importer = new stdClass();
  $feeds_importer->disabled = FALSE; /* Edit this to true to make a default feeds_importer disabled initially */
  $feeds_importer->api_version = 1;
  $feeds_importer->id = 'ical_feed_importer';
  $feeds_importer->config = array(
    'name' => 'meetup.com events',
    'description' => 'meetup.com event feed importer',
    'fetcher' => array(
      'plugin_key' => 'FeedsHTTPFetcher',
      'config' => array(
        'auto_detect_feeds' => FALSE,
        'use_pubsubhubbub' => FALSE,
        'designated_hub' => '',
        'request_timeout' => NULL,
      ),
    ),
    'parser' => array(
      'plugin_key' => 'DateiCalFeedsParser',
      'config' => array(
        'indefinite_count' => '52',
        'until_not_utc' => FALSE,
        'skip_days' => NULL,
      ),
    ),
    'processor' => array(
      'plugin_key' => 'FeedsNodeProcessor',
      'config' => array(
        'expire' => '-1',
        'author' => '1',
        'authorize' => 1,
        'mappings' => array(
          0 => array(
            'source' => 'DTSTART',
            'target' => 'field_date:start',
            'unique' => FALSE,
          ),
          1 => array(
            'source' => 'DTEND',
            'target' => 'field_date:end',
            'unique' => FALSE,
          ),
          2 => array(
            'source' => 'SUMMARY',
            'target' => 'title_field',
            'unique' => FALSE,
          ),
          3 => array(
            'source' => 'DESCRIPTION',
            'target' => 'body',
            'unique' => FALSE,
          ),
          4 => array(
            'source' => 'UID',
            'target' => 'guid',
            'unique' => 1,
          ),
        ),
        'update_existing' => '1',
        'input_format' => 'plain_text',
        'skip_hash_check' => 0,
        'bundle' => 'event',
      ),
    ),
    'content_type' => '',
    'update' => 0,
    'import_period' => '-1',
    'expire_period' => 3600,
    'import_on_create' => 1,
    'process_in_background' => 0,
  );
  return $feeds_importer;
}

/**
 * Implement hook_feeds_importer_default()
 *
 * Add static page importer
 */

function groups_feeds_feeds_importer_default() {
  $export = array();
  $export['staticpages'] = groups_feeds_static_pages_importer();
  $export['ical_feed_importer'] = groups_feeds_meetup_ical_importer();
  return $export;
}

/**
 * List of meetup.com links registered for
 * user groups.
 */

function groups_feeds_get_meetup_links() {
  $result = db_select('node', 'n')
    ->fields('n')->condition('status', 1)
    ->condition('type', 'group', '=')
    ->execute();
  $meetup_links = array();
  foreach ($result as $record) {
    $node = node_load($record->nid);
    $resource_links = $node->field_resource_links['und'];
    if (isset($resource_links)) {
      foreach ($resource_links as $resource_link) {
        $value = $resource_link['value'];
        if ((strpos($value, 'http://www.meetup.com') === 0) ||
            (strpos($value, 'https://www.meetup.com') === 0)) {
          $meetup_links[] = array(
            'nid' => $record->nid,
            'url' => $value);
        }
      }
    }
  }
  return $meetup_links;
}